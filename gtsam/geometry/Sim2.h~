/* ----------------------------------------------------------------------------

 * GTSAM Copyright 2010, Georgia Tech Research Corporation, 
 * Atlanta, Georgia 30332-0415
 * All Rights Reserved
 * Authors: Frank Dellaert, et al. (see THANKS for the full author list)

 * See LICENSE for the license information

 * -------------------------------------------------------------------------- */

/**
 * @file  Sim2.h
 * @brief 2D Similarity
 * @author: Frank Dellaert
 * @author: Richard Roberts
 * @author: Bharat Tak
 */

// \callgraph

#pragma once

#include <boost/optional.hpp>
#include <gtsam/base/Matrix.h>
#include <gtsam/base/DerivedValue.h>
#include <gtsam/geometry/Point2.h>
#include <gtsam/geometry/Rot2.h>

namespace gtsam {

/**
 * A 2D pose (Point2,Rot2)
 * @addtogroup geometry
 * \nosubgrouping
 */
class GTSAM_EXPORT Sim2 : public DerivedValue<Sim2> {

public:
  static const size_t dimension = 4; //2 trans, 1 rot, 1 scale

  /** Pose Concept requirements */
  typedef Rot2 Rotation;
  typedef Point2 Translation;
  typedef double Scale;

private:
  Rot2 r_;
  Point2 t_;
  double s_;

public:

  /// @name Standard Constructors
  /// @{

  /** default constructor = origin */
  Sim2() {} // default is origin

  /** copy constructor */
  Sim2(const Sim2& pose) : r_(pose.r_), t_(pose.t_), s_(pose.s_) {}

  /**
   * construct from (x,y,theta,s)
   * @param x x coordinate
   * @param y y coordinate
   * @param theta angle with positive X-axis
   * @param s scale multiplied to the translation magnitude
   */
  Sim2(double x, double y, double theta, double s) :
    r_(Rot2::fromAngle(theta)), t_(x, y), s_(s) {
  }

  /** construct from rotation and translation and scale */
  Sim2(double theta, const Point2& t, double scale) :
    r_(Rot2::fromAngle(theta)), t_(t), s_(scale) {
  }

  /** construct from r,t,s */
  Sim2(const Rot2& r, const Point2& t, double s) : r_(r), t_(t), s_(s) {}

  /** Constructor from 3*3 matrix */
  Sim2(const Matrix &T) :
    r_(Rot2::atan2(T(1, 0), T(0, 0))), t_(T(0, 2), T(1, 2)), s_(1/T(3, 3)) { //scale is inversed in the matrix!
    assert(T.rows() == 3 && T.cols() == 3);
  }

  /// @}
  /// @name Advanced Constructors
  /// @{

  /** Construct from canonical coordinates \f$ [T_x,T_y,\theta,s] \f$ (Lie algebra) */
  Sim2(const Vector& v) {
    *this = Expmap(v);
  }

  /// @}
  /// @name Testable
  /// @{

  /** print with optional string */
  void print(const std::string& s = "") const;

  /** assert equality up to a tolerance */
  bool equals(const Sim2& sim, double tol = 1e-9) const;

  /// @}
  /// @name Group
  /// @{

  /// identity for group operation
  inline static Sim2 identity() { return Sim2(); }

  /// inverse transformation with derivatives
  Sim2 inverse(boost::optional<Matrix&> H1=boost::none) const;

  /// compose this transformation onto another (first *this and then p2)
  Sim2 compose(const Sim2& p2,
      boost::optional<Matrix&> H1 = boost::none,
      boost::optional<Matrix&> H2 = boost::none) const;

  /// compose syntactic sugar
  inline Sim2 operator*(const Sim2& p2) const {
    return Sim2(r_*p2.r(), (1/p2.s())*t_ + r_*p2.t(), s_*p2.s()); //scale is inverse in matrix remember //easier and cleaner to generate from matrix of product of matrix
  }

  /**
   * Return relative pose between p1 and p2, in p1 coordinate frame
   */
  Sim2 between(const Sim2& p2,
      boost::optional<Matrix&> H1=boost::none,
      boost::optional<Matrix&> H2=boost::none) const;


  /// @}
  /// @name Manifold
  /// @{

  /// Dimensionality of tangent space = 4 DOF - used to autodetect sizes
  inline static size_t Dim() { return dimension; }

  /// Dimensionality of tangent space = 4 DOF
  inline size_t dim() const { return dimension; }

  /// Retraction from R^4 \f$ [T_x,T_y,\theta,s] \f$ to Sim2 manifold neighborhood around current sim2
  Sim2 retract(const Vector& v) const;

  /// Local 3D coordinates??? \f$ [T_x,T_y,\theta,s] \f$ of Sim2 manifold neighborhood around current sim2 IMP CHECK \f$ [T_x,T_y,\theta,s] \f$ or \f$ [s*T_x,s*T_y,\theta] \f$
  Vector localCoordinates(const Sim2& p2) const;

  /// @}
  /// @name Lie Group
  /// @{

  ///Exponential map at identity - create a rotation (?) sim2 element from canonical coordinates \f$ [T_x,T_y,\theta,s] \f$
  static Sim2 Expmap(const Vector& xi);

  ///Log map at identity - return the canonical coordinates \f$ [T_x,T_y,\theta,s] \f$ of this rotation
  static Vector Logmap(const Sim2& p);

  /**
   * Calculate Adjoint map
   * Ad_sim2 is 3*3 matrix that when applied to twist xi \f$ [T_x,T_y,\theta,s] \f$, returns Ad_sim2(xi)
   */
  Matrix AdjointMap() const;
  inline Vector Adjoint(const Vector& xi) const {
    assert(xi.size() == 4);
    return AdjointMap()*xi;
  }

  /**
   * wedge for Sim(2):
   * @param xi 4-dim twist (v,omega,s) where
   *  omega is angular velocity
   *  v (vx,vy) = 2D velocity
   * @return xihat, 3*3 element of Lie algebra that can be exponentiated
   */
  static inline Matrix wedge(double vx, double vy, double w, double scle) {
    return (Matrix(3,3) <<
        0.,-w,  vx,
        w,  0., vy,
        0., 0., scle);
  }

  /// @}
  /// @name Group Action on Point2
  /// @{

  /** Return point coordinates in sim2 coordinate frame */
  Point2 transform_to(const Point2& point,
      boost::optional<Matrix&> H1=boost::none,
      boost::optional<Matrix&> H2=boost::none) const;

  /** Return point coordinates in global frame */
  Point2 transform_from(const Point2& point,
      boost::optional<Matrix&> H1=boost::none,
      boost::optional<Matrix&> H2=boost::none) const;

  /** syntactic sugar for transform_from */
  inline Point2 operator*(const Point2& point) const { return transform_from(point);}

  /// @}
  /// @name Standard Interface
  /// @{

  /// get x
  inline double x()     const { return t_.x(); }

  /// get y
  inline double y()     const { return t_.y(); }

  /// get theta
  inline double theta() const { return r_.theta(); }

  /// get scale
  inline double s() const { return s_; }



  /// translation
  inline const Point2& t() const { return t_; }

  /// rotation
  inline const Rot2&   r() const { return r_; }

  /// translation
  inline const Point2& translation() const { return t_; } //still not scaled with s

  /// rotation
  inline const Rot2&   rotation() const { return r_; }

  //// return transformation matrix
  Matrix matrix() const;

  /**
   * Calculate bearing to a landmark
   * @param point 2D location of landmark
   * @return 2D rotation \f$ \in SO(2) \f$
   */
  Rot2 bearing(const Point2& point,
      boost::optional<Matrix&> H1=boost::none,
      boost::optional<Matrix&> H2=boost::none) const;

  /**
   * Calculate bearing to another sim2
   * @param point SO(2) location of other pose
   * @return 2D rotation \f$ \in SO(2) \f$
   */
  Rot2 bearing(const Sim2& point,
      boost::optional<Matrix&> H1=boost::none,
      boost::optional<Matrix&> H2=boost::none) const;

  /**
   * Calculate range to a landmark
   * @param point 2D location of landmark
   * @return range (double)
   */
  double range(const Point2& point,
      boost::optional<Matrix&> H1=boost::none,
      boost::optional<Matrix&> H2=boost::none) const;

  /**
   * Calculate range to another Sim2
   * @param point 2D location of other pose
   * @return range (double)
   */
  double range(const Sim2& point,
      boost::optional<Matrix&> H1=boost::none,
      boost::optional<Matrix&> H2=boost::none) const;

  /// @}
  /// @name Advanced Interface
  /// @{

  /**
   * Return the start and end indices (inclusive) of the translation component of the
   * exponential map parameterization
   * @return a pair of [start, end] indices into the tangent space vector
   */
  inline static std::pair<size_t, size_t> translationInterval() { return std::make_pair(0, 1); }

  /**
   * Return the start and end indices (inclusive) of the rotation component of the
   * exponential map parameterization
   * @return a pair of [start, end] indices into the tangent space vector
   */
  static std::pair<size_t, size_t> rotationInterval() { return std::make_pair(2, 2); }


  /**
   * Return the start and end indices (inclusive) of the scale component of the
   * exponential map parameterization
   * @return a pair of [start, end] indices into the tangent space vector
   */
  static std::pair<size_t, size_t> scaleInterval() { return std::make_pair(3, 3); }

private:

  // Serialization function
  friend class boost::serialization::access;
  template<class Archive>
  void serialize(Archive & ar, const unsigned int version) {
    ar & boost::serialization::make_nvp("Sim2",
        boost::serialization::base_object<Value>(*this));
    ar & BOOST_SERIALIZATION_NVP(t_);
    ar & BOOST_SERIALIZATION_NVP(r_);
  }
}; // Sim2

/** specialization for Sim2 wedge function (generic template in Lie.h) */
template <>
inline Matrix wedge<Sim2>(const Vector& xi) {
  return Sim2::wedge(xi(0),xi(1),xi(2),xi(3));
}

/**
 * Calculate similarity between a vector of 2D point correspondences (p,q)
 * where q = Pose2::transform_from(p) = t + R*p
 */
typedef std::pair<Point2,Point2> Point2Pair
GTSAM_EXPORT boost::optional<Sim2> align(const std::vector<Point2Pair>& pairs);

/// @}

} // namespace gtsam

