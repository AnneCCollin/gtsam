#pragma once

#include <gtsam/geometry/concepts.h>
#include <gtsam/base/Testable.h>
#include <gtsam/nonlinear/NonlinearFactor.h>


namespace gtsam {


class myUnaryFactor: public NoiseModelFactor1<Pose2> {
double mx_, my_; ///< X and Y measurements

public:
myUnaryFactor(Key j, double x, double y, double s, const SharedNoiseModel& model):
 NoiseModelFactor1<Pose2>(model, j), mx_(x), my_(y) {}

 Vector evaluateError(const Pose2& q,
 boost::optional<Matrix&> H = boost::none) const
 {
 i f (H) (*H) = Matrix_(2,3, 1.0,0.0,0.0, 0.0,1.0,0.0);
 return Vector_(2, q.x() - s*mx_, q.y() - s*my_)
 }
 };

} // namespace gtsam
